import asyncio
import logging

from aiogram import types
from aiogram.dispatcher.filters.builtin import CommandStart
from aiogram.dispatcher import FSMContext
from aiogram.types import ReplyKeyboardRemove

from loader import dp
from states.states import Start
from utils.common_func import loop_action
from utils.db_api.db_commands import get_name_by_id, get_settings_by_id
from keyboards.default import menu
from utils.db_api.models import Emo_users


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–≤–æ–≥–æ –≤—ã–∑–æ–≤–∞ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(CommandStart(), state=None)
async def bot_start(message: types.Message, state: FSMContext):
    str0 = await get_name_by_id(message.from_user.id)
    # –î–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–ª—è –º–æ–¥—É–ª—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    help_m = "–ü—Ä–∏ –æ—Ç–≤–µ—Ç–∞—Ö –Ω–∞ –≤–æ–ø—Ä–æ—Å –±–æ—Ç—É —Ä–µ–≥–∏—Å—Ç—Ä –±—É–∫–≤ –Ω–µ–≤–∞–∂–µ–Ω.\n" \
             "!!–í–ê–ñ–ù–û: –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã, —Å–ª–µ–¥—É–µ—Ç –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –∑–∞–¥–∞–Ω–Ω—ã–π —Ä–∞–Ω–µ–µ –≤–æ–ø—Ä–æ—Å."
    await message.answer(help_m, reply_markup=ReplyKeyboardRemove())
    sti = open("./a_stickers/AnimatedSticker9.tgs", 'rb')  # –ü–æ–¥–º–∏–≥–∏–≤–∞–µ—Ç, —Å–Ω–∏–º–∞—è –æ—á–∫–∏
    await message.answer_sticker(sticker=sti)
    if str0 is None:
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
        await Start.set_user_name.set()  # –∏–ª–∏ –º–æ–∂–Ω–æ await Start.first()
    else:
        await user_settings_from_db(message, state)
        data = await state.get_data()
        tsk_t = data.get("tsk_t")
        current_day = data.get("current_day")
        start_t = data.get("start_t")
        if tsk_t > 90:
            await message.answer("–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
            await Start.set_user_name.set()  # –∏–ª–∏ –º–æ–∂–Ω–æ await Start.first()
            return
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –†–∞–¥ –µ—â–µ —Ä–∞–∑ –≤–∏–¥–µ—Ç—å —Ç–µ–±—è, {0}! –¢–≤–æ–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏–∑ –ë–î –Ω–∞ {1}-–π –¥–µ–Ω—å."
                             " –û–ø—Ä–æ—Å –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é –Ω–∞—á–Ω–µ—Ç—Å—è —Å –Ω–∞—Å—Ç—É–ø–ª–µ–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞ –æ–ø—Ä–æ—Å–∞ ({2:0>2}:00)"
                             ".".format(str0, current_day, start_t), reply_markup=menu)
        await Start.Wait.set()  # —ç—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –∏–º–µ–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ - –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è "–Ω–µ –∫–æ–º–∞–Ω–¥—ã" –ø–æ–ø–∞–¥–∞—é—Ç –≤ –≠—Ö–æ
        task_loop_action = asyncio.create_task(loop_action(message, state))
        name_task = task_loop_action.get_name()
        await state.update_data(name_task=name_task)
        data = await state.get_data()
        logging.info('bot_start 0: data={}'.format(data))
        await task_loop_action  # –∂–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –¥–µ–π—Å—Ç–≤–∏–π


# —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–æ–Ω–æ–º –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
async def user_settings_from_db(message: types.Message, state: FSMContext):
    user_settings: Emo_users = await get_settings_by_id(message.from_user.id)
    # –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π –¥–∞–Ω–Ω—ã—Ö
    await state.update_data(name_user=user_settings.name)
    await state.update_data(tmz=user_settings.ZoneTime)
    await state.update_data(start_t=user_settings.StartTime)
    await state.update_data(end_t=user_settings.EndTime)
    await state.update_data(period=user_settings.Period)
    await state.update_data(tsk_t=user_settings.TaskTime)
    await state.update_data(current_day=user_settings.CurrentDay)
    await state.update_data(flag_pool=1)
    await state.update_data(flag_task=0)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(CommandStart(), state='*')
async def bot_restart(message: types.Message):
    await message.answer("–ó–∞–ë–æ—Ç–∏–∫ —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç üòä")
