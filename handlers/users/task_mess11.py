# –í —ç—Ç–æ–º –º–æ–¥—É–ª–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ó–∞–¥–∞—á–∞ (Task) –¥–ª—è 11–≥–æ –¥–Ω—è
from aiogram.types import Message
from aiogram.dispatcher import FSMContext

from keyboards.default.menu import menu, tsk11_00, tsk02_01
from loader import dp
from states.states import Start, Task11
from utils.db_api.db_commands import db_save_task


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ 1–≥–æ –æ—Ç–≤–µ—Ç–∞ (–ù–∞—á–∞—Ç—å) –∫ "–∑–∞–¥–∞—á–∫–µ –Ω–∞ –ø—Ä–æ–∫–∞—á–∫—É" 11-–≥–æ –¥–Ω—è
@dp.message_handler(state=Task11.Answer_11_01)
async def answer_11_01(message: Message, state: FSMContext):
    s = message.text
    data = await state.get_data()
    name_user = data.get("name_user")
    await db_save_task(message.from_user.id, 11, s)
    await message.answer("–í–æ—Ç —Ç–µ–±–µ –∑–∞–¥–∞—á–∫–∞ –Ω–∞ –ø—Ä–æ–∫–∞—á–∫—É!", reply_markup=tsk02_01)
    await Task11.next()


@dp.message_handler(state=Task11.Answer_11_02)
async def answer_11_02(message: Message, state: FSMContext):
    s = message.text
    data = await state.get_data()
    name_user = data.get("name_user")
    if s == "–í—ã–ø–æ–ª–Ω–∏—Ç—å —Å–µ–π—á–∞—Å!":
        await message.answer("–ü–æ–º–æ–≥–∞–µ—Ç –ª–∏ —Å–µ–π—á–∞—Å —Ç–≤–æ—è —ç–º–æ—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è—Ç—å —Ç–µ–∫—É—â—É—é –∑–∞–¥–∞—á—É? –î–∞ –∏–ª–∏ –Ω–µ—Ç?",
                             reply_markup=tsk11_00)
    elif s == "–í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∑–∂–µ!":
        sti = open("./a_stickers/AnimatedSticker7.tgs", 'rb')  # –ü–ª–∞—á–µ—Ç
        await message.answer_sticker(sticker=sti)
        await message.answer("{0}, –∫–∞–∫ –∂–∞–ª—å, —è –¥—É–º–∞–ª –º—ã –≤–µ—Å–µ–ª–æ –ø—Ä–æ–≤–µ–¥–µ–º –≤—Ä–µ–º—è."
                             " –í–æ–∑–≤—Ä–∞—â–∞–π—Å—è —Å–∫–æ—Ä–µ–µ ‚Äì —è –±—É–¥—É –∂–¥–∞—Ç—å —Ç–µ–±—è –¥–æ –∫–æ–Ω—Ü–∞ –¥–Ω—è".format(name_user),
                             reply_markup=menu)
        await Start.Wait.set()
        return
    else:
        await message.answer("{0}, –∫–ª–∏–∫–Ω–∏ –Ω–∞ —Å–ª—É–∂–µ–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ¬´–í—ã–ø–æ–ª–Ω–∏—Ç—å —Å–µ–π—á–∞—Å!¬ª –ø–æ–¥ —Å—Ç—Ä–æ–∫–æ–π –≤–≤–æ–¥–∞ "
                             "—Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ –Ω–∞ ¬´–í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∑–∂–µ!¬ª.".format(name_user))
        return
    await Task11.next()


#
@dp.message_handler(state=Task11.Answer_11_03)
async def answer_11_03(message: Message, state: FSMContext):
    s = message.text
    data = await state.get_data()
    name_user = data.get("name_user")
    await db_save_task(message.from_user.id, 11, s)
    if s.lower() == "–¥–∞":
        await message.answer("–í–∞–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª —ç–º–æ—Ü–∏–∏. –ö–∞–∫–∏–µ –µ—â–µ –∑–∞–¥–∞—á–∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã –≤ —ç—Ç–æ–π —ç–º–æ—Ü–∏–∏?")
    elif s.lower() == "–Ω–µ—Ç":
        await message.answer("–í–∞–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª —ç–º–æ—Ü–∏–∏. –ö–∞–∫–∏–µ –∑–∞–¥–∞—á–∏ –±—ã–ª–∏ –±—ã –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã –≤ —Ç–≤–æ–µ–π "
                             "—ç–º–æ—Ü–∏–∏?".format(name_user))
    elif s == "–í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∑–∂–µ!":
        sti = open("./a_stickers/AnimatedSticker7.tgs", 'rb')  # –ü–ª–∞—á–µ—Ç
        await message.answer_sticker(sticker=sti)
        await message.answer("{0}, –∫–∞–∫ –∂–∞–ª—å, —è –¥—É–º–∞–ª –º—ã –≤–µ—Å–µ–ª–æ –ø—Ä–æ–≤–µ–¥–µ–º –≤—Ä–µ–º—è."
                             " –í–æ–∑–≤—Ä–∞—â–∞–π—Å—è —Å–∫–æ—Ä–µ–µ ‚Äì —è –±—É–¥—É –∂–¥–∞—Ç—å —Ç–µ–±—è –¥–æ –∫–æ–Ω—Ü–∞ –¥–Ω—è".format(name_user),
                             reply_markup=menu)
        await Start.Wait.set()
        return
    else:
        await message.answer("{0}, –ù–∞–±–µ—Ä–∏ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –∏–ª–∏ –î–∞ –∏–ª–∏ –ù–µ—Ç\n–ò–ª–∏ –≤—ã–±–µ—Ä–∏ ¬´–í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∑–∂–µ¬ª".format(name_user))
        return
    await Task11.next()


#
@dp.message_handler(state=Task11.Answer_11_04)
async def answer_11_04(message: Message, state: FSMContext):
    s = message.text
    await db_save_task(message.from_user.id, 11, s)
    await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π —Å–≤–æ–∏ —ç–º–æ—Ü–∏–∏ –ø–æ –ø–æ–ª–Ω–æ–π üòâ")
    await message.answer("–ù–∞ —Å–µ–≥–æ–¥–Ω—è - –≤—Å–µ! –ñ–¥–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫—É –ø–æ –≥—Ä–∞—Ñ–∏–∫—É.", reply_markup=menu)
    await Start.Wait.set()
