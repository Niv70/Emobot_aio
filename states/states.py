from aiogram.dispatcher.filters.state import StatesGroup, State


# Создаем класс состояний обработки сообщений при начале работы бота
class Start(StatesGroup):
    set_user_name = State()  # Пользователь должен ввести свое имя, бот выдает Инфо с кнопками
    from_db_user_name = State()  # Пользователь есть в БД и мы его занаем
    Call_01 = State()  # Пользователь должен нажать кнопки Начнем или Зачем?, бот выдает Инфо с кнопками
    Call_02 = State()  # Пользователь должен нажать кнопки Уже_знаком или Интересно, бот выдает Инфо с кнопкой
    Call_03 = State()  # Пользователь должен нажать кнопку Договорились, бот выдает запрос на ввод Я чувствую интерес
    Tst = State()  # Пользователь должен ввести Я чувствую интерес, бот выдает запрос на ввод Часовой пояс
    set_tmz = State()  # Пользователь ввести цифру Часовой пояс, бот выдает запрос на подтверждение с кнопками
    Call_04 = State()  # Пользователь должен нажать кнопки Да или Нет, если (Да) бот выдает запрос на ввод Время начала
    set_start_t = State()  # Пользователь ввел цифру Время начала опроса, бот выдает запрос на ввод Время завершения
    set_end_t = State()  # Пользователь ввел цифру Время завершения опроса, бот выдает запрос на ввод Период опроса
    set_period = State()  # Пользователь ввел цифру Период опроса и должен ввести Время задачки "на прокачку"
    set_tsk_t = State()  # Пользователь ввел цифру Время задачки, бот переходит к ожиданию опроса на следующий день


# Создаем класс состояний обработки сообщений при опросе эмоций
class Pool(StatesGroup):
    Wait = State()  # Бот ждет времени очередного опроса, бот выдает сообщение о необходимости ввода эмоции -!нет обраб!
    Emo = State()  # Пользователь должен ввести эмоцию, бот сообщает о необходимости ввода причины этой эмоции
    Reason = State()  # Пользователь должен ввести причину, бот переходит к ожиданию очередного опроса или задачки


# Создаем класс состояний обработки сообщений при выполнении задачку "на прокачку"
class Task(StatesGroup):
    Wait = State()  # Бот ждет времени начала задачки, бот выдает сообщение о необходимости ввода 1го ответа к задачке
    Answer_02_01 = State()  # Пользователь должен вв 1й ответ к задаче 2го дня, бот сообщает о необходимости вв 2го
    Answer_02_02 = State()  # Пользователь должен вв 2й ответ к задаче 2го дня, бот сообщает о необходимости вв 3го
    Answer_02_03 = State()  # Пользователь должен вв 3й ответ к задаче 2го дня, бот сообщает о необходимости вв 4го
    Answer_02_04 = State()  # Пользователь должен вв 4й ответ к задаче 2го дня, бот сообщает о необходимости вв 5го
    Answer_02_05 = State()  # Пользователь должен вв 5й ответ к задаче 2го дня, бот переходит к ожиданию след.опроса
    Answer_03_01 = State()
    Answer_03_02 = State()
    Answer_03_03 = State()
